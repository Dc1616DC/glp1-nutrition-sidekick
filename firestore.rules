rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the request is from an authenticated user
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is accessing their own data
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Helper function to validate user profile data
    function isValidUserProfile(data) {
      return data.keys().hasOnly(['uid', 'email', 'tdee', 'targetCalories', 'proteinGoal', 
                                 'dietaryRestrictions', 'mealPreferences', 'notificationSettings', 'fcmTokens']) &&
             data.uid is string &&
             data.email is string &&
             (!('tdee' in data) || data.tdee is number) &&
             (!('targetCalories' in data) || data.targetCalories is number) &&
             (!('dietaryRestrictions' in data) || data.dietaryRestrictions is list) &&
             (!('mealPreferences' in data) || data.mealPreferences is list) &&
             (!('fcmTokens' in data) || data.fcmTokens is list);
    }
    
    // User profiles - users can only read and write their own data
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && isValidUserProfile(request.resource.data);
      allow update: if isOwner(userId) && isValidUserProfile(request.resource.data);
      allow delete: if isOwner(userId);
    }
    
    // Meals - all authenticated users can read, but only admins can write
    match /mealTemplates/{mealId} {
      allow read: if isSignedIn();
      // Only allow writes from admin SDK or server (Firebase Functions)
      allow write: if false; // Restrict direct writes - use Firebase Functions instead
    }
    
    // User symptoms - users can only read and write their own symptom data
    match /userSymptoms/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
      
      // Symptom logs subcollection
      match /logs/{logId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && 
                       request.resource.data.keys().hasAll(['symptom', 'severity', 'timestamp']) &&
                       request.resource.data.severity >= 1 &&
                       request.resource.data.severity <= 10;
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
    }
    
    // API cache collection - only server-side access
    match /api_cache/{cacheId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn(); // In production, restrict to server-side only
    }
    
    // User meal history
    match /userMeals/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
      
      match /history/{mealId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }
    }
    
    // Saved meals - users can only access their own saved meals
    match /savedMeals/{mealId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && 
                     request.resource.data.userId == request.auth.uid &&
                     request.resource.data.keys().hasAll(['title', 'ingredients', 'userId']);
      allow update: if isSignedIn() && 
                     resource.data.userId == request.auth.uid &&
                     request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
    
    // User subscriptions - users can only read their own subscription data
    match /userSubscriptions/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // User meal generation history (for analytics)
    match /userMealHistory/{historyId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }
    
    // Shopping lists - users can only access their own shopping lists
    match /shoppingLists/{listId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && 
                     request.resource.data.userId == request.auth.uid &&
                     request.resource.data.keys().hasAll(['name', 'userId']);
      allow update: if isSignedIn() && 
                     resource.data.userId == request.auth.uid &&
                     request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
    
    // Pantries - users can only access their own pantry (userId is document ID)
    match /pantries/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isOwner(userId);
    }
    
    // Meal logs - users can only access their own meal logging data
    match /mealLogs/{logId} {
      allow read: if isSignedIn() && 
                     (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isSignedIn() && 
                     request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && 
                     resource.data.userId == request.auth.uid &&
                     request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
    
    // Meal commitments - users can only access their own commitments (userId is document ID)
    match /mealCommitments/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isOwner(userId);
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
